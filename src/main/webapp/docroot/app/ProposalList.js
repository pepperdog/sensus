// Generated by CoffeeScript 1.12.4
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Sensus.ProposalList = (function(superClass) {
    extend(ProposalList, superClass);

    function ProposalList() {
      this.fetchProposals = bind(this.fetchProposals, this);
      this.update = bind(this.update, this);
      this.render = bind(this.render, this);
      this.initialize = bind(this.initialize, this);
      return ProposalList.__super__.constructor.apply(this, arguments);
    }

    ProposalList.prototype.scriptLocation = AppSupport.scriptLocation();

    ProposalList.prototype.proposals = null;

    ProposalList.prototype.initialize = function(options) {
      ProposalList.__super__.initialize.call(this, options);
      this.proposals = new Sensus.Proposals;
      return this.fetchProposals();
    };

    ProposalList.prototype.render = function() {
      ProposalList.__super__.render.apply(this, arguments);
      this.$el.css('height', window.innerHeight + 'px');
      $(window).resize((function(_this) {
        return function() {
          return _this.$el.css('height', window.innerHeight + 'px');
        };
      })(this));
      return this.$el;
    };

    ProposalList.prototype.update = function() {
      var element;
      element = this.$('#ProposalList');
      element.empty();
      this.proposals.each((function(_this) {
        return function(proposal, index, list) {
          var cell;
          cell = new Sensus.ProposalCell({
            model: proposal
          });
          return element.append(cell.render());
        };
      })(this));
      return this.$el;
    };

    ProposalList.prototype.fetchProposals = function() {
      return this.proposals.fetch({
        success: (function(_this) {
          return function(collection, response, options) {
            console.log("Fetched Proposals: " + collection.length);
            return _this.update();
          };
        })(this),
        error: (function(_this) {
          return function(collection, response, options) {
            return console.log("error fetching Proposals");
          };
        })(this)
      });
    };

    return ProposalList;

  })(AppSupport.SelfLoadingView);

}).call(this);
